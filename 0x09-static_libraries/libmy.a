!<arch>
0-isupper.c/    0           0     0     644     234       `
#include "main.h"

/**
  * _isupper - Check if a letter is upper
  * @c: The number to be checked
  *
  * Return: 1 for upper letter or 0 for any else
  */

int _isupper(int c)
{
	if (c >= 65 && c <= 90)
		return (1);

	return (0);
}
0-memset.c/     0           0     0     644     276       `
#include "main.h"

/**
 * _memset - the memset method
 * @s: the returned meory
 * @b: constant byte
 * @n: the byte memory
 *
 * Return: The returned value
 */

char *_memset(char *s, char b, unsigned int n)
{
	char *ptr = s;

	while (n-- > 0)
		*ptr++ = b;

	return (s);

}
0-strcat.c/     0           0     0     644     331       `
#include "main.h"

/**
 * *_strcat - string cat function
 * @dest: first passed in variable
 *
 * @src: second variable
 *
 * Return: the returned value
 *
 */



char *_strcat(char *dest, char *src)
{
	char *ptr = dest;

	while (*ptr != '\0')
		ptr++;

	while (*src != '\0')
		*ptr++ = *src++;

	*ptr = '\0';

	return (dest);


}

100-atoi.c/     0           0     0     644     439       `
#include "main.h"

/**
 * _atoi - Convert a string to an integer.
 * @s: The pointer to convert
 *
 * Return: A integer
 */
int _atoi(char *s)
{
	int c = 0;
	unsigned int ni = 0;
	int min = 1;
	int isi = 0;

	while (s[c])
	{
		if (s[c] == 45)
		{
			min *= -1;
		}

		while (s[c] >= 48 && s[c] <= 57)
		{
			isi = 1;
			ni = (ni * 10) + (s[c] - '0');
			c++;
		}

		if (isi == 1)
		{
			break;
		}

		c++;
	}

	ni *= min;
	return (ni);
}


1-isdigit.c/    0           0     0     644     264       `
#include "main.h"

/**
  * _isdigit - Check if a character is a digit
  * @x: The number to be checked
  *
  * Return: 1 for a character that will be a digit or 0 for any else
  */
int _isdigit(int x)
{
	if (x >= 48 && x <= 57)
	{
		return (1);
	}

	return (0);
}
1-memcpy.c/     0           0     0     644     300       `
#include "main.h"

/**
 * _memcpy - the memory copy function
 *
 * @dest: the returned mem
 * @src: memory area
 * @n: int n
 *
 * Return: the returned value
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		dest[i] = src[i];

	return (dest);
}
1-strncat.c/    0           0     0     644     419       `
#include "main.h"

/**
 * *_strncat - the strngcat function
 *
 * @dest: the first variable
 *
 * @src: the second variable
 *
 * @n: append n from the source code
 *
 * Return: the returned value
 *
 */

char *_strncat(char *dest, char *src, int n)
{
	int i;
	char *ptr = dest;

	while (*ptr != '\0')
		ptr++;

	i = 0;

	while (*src != '\0' && i < n)
	{
		*ptr++ = *src++;
		i++;
	}

	*ptr = '\0';

	return (dest);

}

2-strchr.c/     0           0     0     644     435       `
#include <stdlib.h>
#include "main.h"
/**
 * _strchr - locates a character in a string
 *
 * @s: the string to check
 * @c: the character we're looking for
 *
 * Return: a pointer to the first occurance of the character @c in the string
 * @s. Return NULL if the character isn't found
 */

char *_strchr(char *s, char c)
{
	while (*s)
	{
		if (*s != c)
			s++;
		else
			return (s);
	}
	if (c == '\0')
		return (s);

	return (NULL);
}

2-strlen.c/     0           0     0     644     227       `
#include "main.h"

/**
 * _strlen - Returns the length of a string
 * @s: length of string to be printed.
 *
 * Return: string length
 */
int _strlen(char *s)
{
	int c = 0;

	for (; *s != '\0'; s++)
	{
		c++;
	}
	return (c);
}

2-strncpy.c/    0           0     0     644     408       `
#include "main.h"

/**
 * *_strncpy - string copy function
 *
 * @dest: first passed in variable
 *
 * @src: second variable
 *
 * @n: the int variable
 *
 * Return: the returned value
 *
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;
	char *ptr = dest;

	i = 0;

	while (*src != '\0' && i < n)
	{
		*ptr++ = *src++;
		i++;
	}

	while (i < n)
	{
		*ptr++ = '\0';
		 i++;
	}

	return (dest);


}
3-islower.c/    0           0     0     644     284       `
#include "main.h"

/**
 * _islower - check if a character is lower case
 *
 * @c: the inputted value
 *
 * if - conditional statement
 *
 * else - - to return 0
 *
 * Return: the returned value
 */

int _islower(int c)
{
	if (c >= 97 && c <= 123)
		return (1);
	else
		return (0);

}
3-puts.c/       0           0     0     644     254       `
#include "main.h"

/**
 * _puts - a function that prints a string, followed by a new line, to stdout.
 * @str: string to be printed
 *
 * Return: (void)
 */

void _puts(char *str)
{
	for (; *str != '\0'; str++)
	{
		_putchar(*str);
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     297       `
#include "main.h"

/**
 * _strcmp - compare function
 *
 * @s1: first string
 *
 * @s2: second string
 *
 * Return: the returned value
 *
 */

int _strcmp(char *s1, char *s2)
{
	int i;

	i = 0;

	while (s1[i] == s2[i])
	{
		if (s1[i] == '\0')
			return (0);
		i++;
	}

	return (s1[i] - s2[i]);

}

3-strspn.c/     0           0     0     644     426       `
#include "main.h"

/**
 * _strspn - gets the length of a prefix substring
 *
 * @s: the string arguement
 *
 * @accept: the accept arguement
 *
 * Return: the returned value
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, j;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
				break;
		}
		if (accept[j] == '\0')
			return (i);


	}

	return (i);

}
4-isalpha.c/    0           0     0     644     280       `
#include "main.h"

/**
 * _isalpha - check if the inputted value is a character
 *
 * @c: the inputted character
 *
 * Return: The returned value
 */

int _isalpha(int c)
{
	if (c >= 65 && c <= 91)
		return (1);
	else if (c >= 97 && c <= 123)
		return (1);
	else
		return (0);

}
4-strpbrk.c/    0           0     0     644     392       `
#include "main.h"
#include <stddef.h>

/**
 * _strpbrk - searches a string for any of a set of bytes
 *
 * @s: the passed arguemnet
 * @accept: the second arguement
 *
 * Return: the returned value
 */

char *_strpbrk(char *s, char *accept)
{
	char *a;

	while (*s != '\0')
	{
		a = accept;

		while (*a != '\0')
		{
			if (*s == *a)
				return (s);
			a++;
		}
		s++;
	}
	return (NULL);


}
5-strstr.c/     0           0     0     644     553       `
#include "main.h"
#include <stddef.h>

/**
 * _strstr - a function that locates a substring
 *
 * @haystack: the first arguement
 *
 * @needle: the second arguement
 *
 * Return: The returned value
 */

char *_strstr(char *haystack, char *needle)
{
	char *p1, *p2, *p3;

	if (*needle == '\0')
		return (haystack);


	p1 = haystack;

	while (*p1 != '\0')
	{
		if (*p1 == *needle)
		{
			p2 = needle;
			p3 = p1;


			while (*p2 != '\0' && *p3 == *p2)
			{
				p2++;
				p3++;
			}

			if (*p2 == '\0')
				return (p1);
		}
		p1++;

	}
	return (NULL);

}

6-abs.c/        0           0     0     644     241       `
#include "main.h"

/**
 * _abs - function that computes the absolute value of an integer.
 *
 * @n: the inputted value
 *
 * Return: the returned value
 */

int _abs(int n)
{
	if (n < 0)
	{
		n *= -1;
		return (n);
	}
	else
		return (n);

}

9-strcpy.c/     0           0     0     644     291       `
#include "main.h"

/**
  * _strcpy - Copy a string
  * @dest: Destination value
  * @src: Source value
  *
  * Return: the pointer to dest
  */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}

	dest[i++] = '\0';

	return (dest);
}

_putchar.c/     0           0     0     644     343       `
#include "main.h"
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

